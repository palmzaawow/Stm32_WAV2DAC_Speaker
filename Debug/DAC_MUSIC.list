
DAC_MUSIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000529c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005494  08005494  00006494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b4  080054b4  0001afa0  2**0
                  CONTENTS
  4 .ARM          00000008  080054b4  080054b4  000064b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054bc  080054bc  0001afa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054bc  080054bc  000064bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054c0  080054c0  000064c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00013e60  20000000  080054c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20013e60  08019324  0001ae60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20013f00  080193c4  0001af00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000073c  20013fa0  08019464  0001afa0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200146dc  08019464  0001b6dc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001afa0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018829  00000000  00000000  0001afce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f9a  00000000  00000000  000337f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001430  00000000  00000000  00036798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029cc1  00000000  00000000  00037bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183a5  00000000  00000000  00061889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104d83  00000000  00000000  00079c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017e9b1  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000fae  00000000  00000000  0017e9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005618  00000000  00000000  0017f9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  00184fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20013fa0 	.word	0x20013fa0
 8000214:	00000000 	.word	0x00000000
 8000218:	0800547c 	.word	0x0800547c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20013fa4 	.word	0x20013fa4
 8000234:	0800547c 	.word	0x0800547c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fd83 	bl	8001036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f812 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f9c2 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000538:	f000 f9a2 	bl	8000880 <MX_DMA_Init>
  MX_ETH_Init();
 800053c:	f000 f8a6 	bl	800068c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000540:	f000 f940 	bl	80007c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000544:	f000 f96e 	bl	8000824 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000548:	f000 f876 	bl	8000638 <MX_DAC_Init>
  MX_TIM4_Init();
 800054c:	f000 f8ec 	bl	8000728 <MX_TIM4_Init>
//  TIM4_Init(44100);
//
//  HAL_TIM_Base_Start(&htim4);
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);

  PlayWav();
 8000550:	f000 fa56 	bl	8000a00 <PlayWav>
  //HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)wav440Hz, 100, DAC_ALIGN_12B_R);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <main+0x2c>

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	@ 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 ff5b 	bl	8005422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800057c:	f002 f944 	bl	8002808 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	4b2b      	ldr	r3, [pc, #172]	@ (8000630 <SystemClock_Config+0xd8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a2a      	ldr	r2, [pc, #168]	@ (8000630 <SystemClock_Config+0xd8>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <SystemClock_Config+0xd8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <SystemClock_Config+0xdc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a25      	ldr	r2, [pc, #148]	@ (8000634 <SystemClock_Config+0xdc>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <SystemClock_Config+0xdc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005c8:	23d8      	movs	r3, #216	@ 0xd8
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005d0:	2309      	movs	r3, #9
 80005d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 f973 	bl	80028c8 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e8:	f000 fa1e 	bl	8000a28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ec:	f002 f91c 	bl	8002828 <HAL_PWREx_EnableOverDrive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005f6:	f000 fa17 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000606:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2107      	movs	r1, #7
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fc03 	bl	8002e24 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000624:	f000 fa00 	bl	8000a28 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	@ 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_DAC_Init+0x4c>)
 8000648:	4a0f      	ldr	r2, [pc, #60]	@ (8000688 <MX_DAC_Init+0x50>)
 800064a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <MX_DAC_Init+0x4c>)
 800064e:	f000 fe84 	bl	800135a <HAL_DAC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000658:	f000 f9e6 	bl	8000a28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800065c:	232c      	movs	r3, #44	@ 0x2c
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	@ (8000684 <MX_DAC_Init+0x4c>)
 800066c:	f000 ff3a 	bl	80014e4 <HAL_DAC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000676:	f000 f9d7 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20013ff4 	.word	0x20013ff4
 8000688:	40007400 	.word	0x40007400

0800068c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <MX_ETH_Init+0x84>)
 8000692:	4a20      	ldr	r2, [pc, #128]	@ (8000714 <MX_ETH_Init+0x88>)
 8000694:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <MX_ETH_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800069c:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <MX_ETH_Init+0x8c>)
 800069e:	2280      	movs	r2, #128	@ 0x80
 80006a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_ETH_Init+0x8c>)
 80006a4:	22e1      	movs	r2, #225	@ 0xe1
 80006a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_ETH_Init+0x8c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_ETH_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_ETH_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_ETH_Init+0x84>)
 80006bc:	4a16      	ldr	r2, [pc, #88]	@ (8000718 <MX_ETH_Init+0x8c>)
 80006be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_ETH_Init+0x84>)
 80006c2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006c6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_ETH_Init+0x84>)
 80006ca:	4a14      	ldr	r2, [pc, #80]	@ (800071c <MX_ETH_Init+0x90>)
 80006cc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_ETH_Init+0x84>)
 80006d0:	4a13      	ldr	r2, [pc, #76]	@ (8000720 <MX_ETH_Init+0x94>)
 80006d2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_ETH_Init+0x84>)
 80006d6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006da:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006dc:	480c      	ldr	r0, [pc, #48]	@ (8000710 <MX_ETH_Init+0x84>)
 80006de:	f001 fa45 	bl	8001b6c <HAL_ETH_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 f99e 	bl	8000a28 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ec:	2238      	movs	r2, #56	@ 0x38
 80006ee:	2100      	movs	r1, #0
 80006f0:	480c      	ldr	r0, [pc, #48]	@ (8000724 <MX_ETH_Init+0x98>)
 80006f2:	f004 fe96 	bl	8005422 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <MX_ETH_Init+0x98>)
 80006f8:	2221      	movs	r2, #33	@ 0x21
 80006fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006fc:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_ETH_Init+0x98>)
 80006fe:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000702:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_ETH_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20014068 	.word	0x20014068
 8000714:	40028000 	.word	0x40028000
 8000718:	200146d0 	.word	0x200146d0
 800071c:	20013f00 	.word	0x20013f00
 8000720:	20013e60 	.word	0x20013e60
 8000724:	20013fbc 	.word	0x20013fbc

08000728 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_TIM4_Init+0x94>)
 8000748:	4a1d      	ldr	r2, [pc, #116]	@ (80007c0 <MX_TIM4_Init+0x98>)
 800074a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1223;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_TIM4_Init+0x94>)
 800074e:	f240 42c7 	movw	r2, #1223	@ 0x4c7
 8000752:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_TIM4_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_TIM4_Init+0x94>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_TIM4_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_TIM4_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800076c:	4813      	ldr	r0, [pc, #76]	@ (80007bc <MX_TIM4_Init+0x94>)
 800076e:	f003 f9a7 	bl	8003ac0 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000778:	f000 f956 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <MX_TIM4_Init+0x94>)
 800078a:	f003 fb9f 	bl	8003ecc <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 f948 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000798:	2320      	movs	r3, #32
 800079a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_TIM4_Init+0x94>)
 80007a6:	f003 fdd3 	bl	8004350 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80007b0:	f000 f93a 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20014118 	.word	0x20014118
 80007c0:	40000800 	.word	0x40000800

080007c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_USART3_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_USART3_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_USART3_UART_Init+0x58>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_USART3_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_USART3_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_USART3_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_USART3_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_USART3_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_USART3_UART_Init+0x58>)
 8000808:	f003 fe4e 	bl	80044a8 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f909 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20014164 	.word	0x20014164
 8000820:	40004800 	.word	0x40004800

08000824 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800082e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000832:	2206      	movs	r2, #6
 8000834:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000838:	2202      	movs	r2, #2
 800083a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	2202      	movs	r2, #2
 8000846:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2201      	movs	r2, #1
 800084c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2201      	movs	r2, #1
 800085e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	f001 fe93 	bl	8002592 <HAL_PCD_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f8d9 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200141ec 	.word	0x200141ec

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_DMA_Init+0x38>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a0b      	ldr	r2, [pc, #44]	@ (80008b8 <MX_DMA_Init+0x38>)
 800088c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_DMA_Init+0x38>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2010      	movs	r0, #16
 80008a4:	f000 fd23 	bl	80012ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008a8:	2010      	movs	r0, #16
 80008aa:	f000 fd3c 	bl	8001326 <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b47      	ldr	r3, [pc, #284]	@ (80009f0 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a46      	ldr	r2, [pc, #280]	@ (80009f0 <MX_GPIO_Init+0x134>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b44      	ldr	r3, [pc, #272]	@ (80009f0 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	4b41      	ldr	r3, [pc, #260]	@ (80009f0 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a40      	ldr	r2, [pc, #256]	@ (80009f0 <MX_GPIO_Init+0x134>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b3e      	ldr	r3, [pc, #248]	@ (80009f0 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b3b      	ldr	r3, [pc, #236]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a3a      	ldr	r2, [pc, #232]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b38      	ldr	r3, [pc, #224]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a34      	ldr	r2, [pc, #208]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a2e      	ldr	r2, [pc, #184]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094a:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a28      	ldr	r2, [pc, #160]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000968:	4822      	ldr	r0, [pc, #136]	@ (80009f4 <MX_GPIO_Init+0x138>)
 800096a:	f001 fdf9 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2140      	movs	r1, #64	@ 0x40
 8000972:	4821      	ldr	r0, [pc, #132]	@ (80009f8 <MX_GPIO_Init+0x13c>)
 8000974:	f001 fdf4 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	481b      	ldr	r0, [pc, #108]	@ (80009fc <MX_GPIO_Init+0x140>)
 8000990:	f001 fc3a 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000994:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4811      	ldr	r0, [pc, #68]	@ (80009f4 <MX_GPIO_Init+0x138>)
 80009ae:	f001 fc2b 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b2:	2340      	movs	r3, #64	@ 0x40
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <MX_GPIO_Init+0x13c>)
 80009ca:	f001 fc1d 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ce:	2380      	movs	r3, #128	@ 0x80
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_GPIO_Init+0x13c>)
 80009e2:	f001 fc11 	bl	8002208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3730      	adds	r7, #48	@ 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020400 	.word	0x40020400
 80009f8:	40021800 	.word	0x40021800
 80009fc:	40020800 	.word	0x40020800

08000a00 <PlayWav>:

/* USER CODE BEGIN 4 */
void PlayWav(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    wav_index = 0;
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <PlayWav+0x1c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
    //HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)numbers_speech_wav, numbers_speech_wav_len, DAC_ALIGN_12B_R);
    HAL_TIM_Base_Start_IT(&htim4);
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <PlayWav+0x20>)
 8000a0c:	f003 f8b0 	bl	8003b70 <HAL_TIM_Base_Start_IT>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000a10:	2100      	movs	r1, #0
 8000a12:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <PlayWav+0x24>)
 8000a14:	f000 fcc3 	bl	800139e <HAL_DAC_Start>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200146cc 	.word	0x200146cc
 8000a20:	20014118 	.word	0x20014118
 8000a24:	20013ff4 	.word	0x20013ff4

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a2d      	ldr	r2, [pc, #180]	@ (8000b50 <HAL_DAC_MspInit+0xd4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d153      	bne.n	8000b46 <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <HAL_DAC_MspInit+0xd8>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b54 <HAL_DAC_MspInit+0xd8>)
 8000aa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <HAL_DAC_MspInit+0xd8>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <HAL_DAC_MspInit+0xd8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a26      	ldr	r2, [pc, #152]	@ (8000b54 <HAL_DAC_MspInit+0xd8>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <HAL_DAC_MspInit+0xd8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ace:	2310      	movs	r3, #16
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481d      	ldr	r0, [pc, #116]	@ (8000b58 <HAL_DAC_MspInit+0xdc>)
 8000ae2:	f001 fb91 	bl	8002208 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b60 <HAL_DAC_MspInit+0xe4>)
 8000aea:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000aee:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000af2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af4:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000af6:	2240      	movs	r2, #64	@ 0x40
 8000af8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000b00:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000b02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b06:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000b0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b0e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000b12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b16:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8000b18:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b24:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000b2a:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000b2c:	f000 fd34 	bl	8001598 <HAL_DMA_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_DAC_MspInit+0xbe>
    {
      Error_Handler();
 8000b36:	f7ff ff77 	bl	8000a28 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <HAL_DAC_MspInit+0xe0>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	@ 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40007400 	.word	0x40007400
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	20014008 	.word	0x20014008
 8000b60:	40026088 	.word	0x40026088

08000b64 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	@ 0x38
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a4e      	ldr	r2, [pc, #312]	@ (8000cbc <HAL_ETH_MspInit+0x158>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	f040 8096 	bne.w	8000cb4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b88:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000b8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b94:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b9c:	623b      	str	r3, [r7, #32]
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	4b47      	ldr	r3, [pc, #284]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	4a46      	ldr	r2, [pc, #280]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000ba6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bac:	4b44      	ldr	r3, [pc, #272]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	4b41      	ldr	r3, [pc, #260]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	4a40      	ldr	r2, [pc, #256]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bdc:	4b38      	ldr	r3, [pc, #224]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	4a34      	ldr	r2, [pc, #208]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf4:	4b32      	ldr	r3, [pc, #200]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c04:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c18:	4b29      	ldr	r3, [pc, #164]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	4a28      	ldr	r2, [pc, #160]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c24:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <HAL_ETH_MspInit+0x15c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c30:	2332      	movs	r3, #50	@ 0x32
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481e      	ldr	r0, [pc, #120]	@ (8000cc4 <HAL_ETH_MspInit+0x160>)
 8000c4c:	f001 fadc 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c50:	2386      	movs	r3, #134	@ 0x86
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c60:	230b      	movs	r3, #11
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4817      	ldr	r0, [pc, #92]	@ (8000cc8 <HAL_ETH_MspInit+0x164>)
 8000c6c:	f001 facc 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c82:	230b      	movs	r3, #11
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480f      	ldr	r0, [pc, #60]	@ (8000ccc <HAL_ETH_MspInit+0x168>)
 8000c8e:	f001 fabb 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c92:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <HAL_ETH_MspInit+0x16c>)
 8000cb0:	f001 faaa 	bl	8002208 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3738      	adds	r7, #56	@ 0x38
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40028000 	.word	0x40028000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	40020400 	.word	0x40020400
 8000cd0:	40021800 	.word	0x40021800

08000cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <HAL_TIM_Base_MspInit+0x44>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d113      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <HAL_TIM_Base_MspInit+0x48>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	4a0c      	ldr	r2, [pc, #48]	@ (8000d1c <HAL_TIM_Base_MspInit+0x48>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_TIM_Base_MspInit+0x48>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	201e      	movs	r0, #30
 8000d04:	f000 faf3 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d08:	201e      	movs	r0, #30
 8000d0a:	f000 fb0c 	bl	8001326 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40000800 	.word	0x40000800
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0ae      	sub	sp, #184	@ 0xb8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2290      	movs	r2, #144	@ 0x90
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f004 fb6e 	bl	8005422 <memset>
  if(huart->Instance==USART3)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a22      	ldr	r2, [pc, #136]	@ (8000dd4 <HAL_UART_MspInit+0xb4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d13c      	bne.n	8000dca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fa86 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d6a:	f7ff fe5d 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <HAL_UART_MspInit+0xb8>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a19      	ldr	r2, [pc, #100]	@ (8000dd8 <HAL_UART_MspInit+0xb8>)
 8000d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <HAL_UART_MspInit+0xb8>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <HAL_UART_MspInit+0xb8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <HAL_UART_MspInit+0xb8>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <HAL_UART_MspInit+0xb8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db8:	2307      	movs	r3, #7
 8000dba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <HAL_UART_MspInit+0xbc>)
 8000dc6:	f001 fa1f 	bl	8002208 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dca:	bf00      	nop
 8000dcc:	37b8      	adds	r7, #184	@ 0xb8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40004800 	.word	0x40004800
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020c00 	.word	0x40020c00

08000de0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ae      	sub	sp, #184	@ 0xb8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2290      	movs	r2, #144	@ 0x90
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 fb0e 	bl	8005422 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e0e:	d159      	bne.n	8000ec4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fa25 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e2c:	f7ff fdfc 	bl	8000a28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <HAL_PCD_MspInit+0xec>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a25      	ldr	r2, [pc, #148]	@ (8000ecc <HAL_PCD_MspInit+0xec>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <HAL_PCD_MspInit+0xec>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e48:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e62:	230a      	movs	r3, #10
 8000e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4818      	ldr	r0, [pc, #96]	@ (8000ed0 <HAL_PCD_MspInit+0xf0>)
 8000e70:	f001 f9ca 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4810      	ldr	r0, [pc, #64]	@ (8000ed0 <HAL_PCD_MspInit+0xf0>)
 8000e90:	f001 f9ba 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e94:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <HAL_PCD_MspInit+0xec>)
 8000e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <HAL_PCD_MspInit+0xec>)
 8000e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e9e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <HAL_PCD_MspInit+0xec>)
 8000ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <HAL_PCD_MspInit+0xec>)
 8000eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_PCD_MspInit+0xec>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <HAL_PCD_MspInit+0xec>)
 8000eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ec4:	bf00      	nop
 8000ec6:	37b8      	adds	r7, #184	@ 0xb8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f8c1 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
//	            HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);  // หยุด DAC
//	        }
//	    }

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <DMA1_Stream5_IRQHandler+0x10>)
 8000f3a:	f000 fbdb 	bl	80016f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20014008 	.word	0x20014008

08000f48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	 if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE)) {
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <TIM4_IRQHandler+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d123      	bne.n	8000fa2 <TIM4_IRQHandler+0x5a>
	        __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <TIM4_IRQHandler+0x64>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f06f 0201 	mvn.w	r2, #1
 8000f62:	611a      	str	r2, [r3, #16]


	        if (wav_index < numbers_speech_wav_len) {
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <TIM4_IRQHandler+0x68>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <TIM4_IRQHandler+0x6c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d20e      	bcs.n	8000f8e <TIM4_IRQHandler+0x46>
	            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, numbers_speech_wav[wav_index]);
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <TIM4_IRQHandler+0x68>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a10      	ldr	r2, [pc, #64]	@ (8000fb8 <TIM4_IRQHandler+0x70>)
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	480f      	ldr	r0, [pc, #60]	@ (8000fbc <TIM4_IRQHandler+0x74>)
 8000f7e:	f000 fa87 	bl	8001490 <HAL_DAC_SetValue>
//	            HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)&numbers_speech_wav[wav_index], 1, DAC_ALIGN_12B_R);
	            wav_index++;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <TIM4_IRQHandler+0x68>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a09      	ldr	r2, [pc, #36]	@ (8000fb0 <TIM4_IRQHandler+0x68>)
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e009      	b.n	8000fa2 <TIM4_IRQHandler+0x5a>
	        } else {

	            HAL_TIM_Base_Stop_IT(&htim4);
 8000f8e:	4807      	ldr	r0, [pc, #28]	@ (8000fac <TIM4_IRQHandler+0x64>)
 8000f90:	f002 fe66 	bl	8003c60 <HAL_TIM_Base_Stop_IT>
	            HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8000f94:	2100      	movs	r1, #0
 8000f96:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <TIM4_IRQHandler+0x74>)
 8000f98:	f000 fa58 	bl	800144c <HAL_DAC_Stop>
	            wav_index = 0;
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <TIM4_IRQHandler+0x68>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
	        }
	    }
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fa2:	4802      	ldr	r0, [pc, #8]	@ (8000fac <TIM4_IRQHandler+0x64>)
 8000fa4:	f002 fe8b 	bl	8003cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20014118 	.word	0x20014118
 8000fb0:	200146cc 	.word	0x200146cc
 8000fb4:	20013e50 	.word	0x20013e50
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20013ff4 	.word	0x20013ff4

08000fc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe8:	f7ff ffea 	bl	8000fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001012:	f004 fa0f 	bl	8005434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fa87 	bl	8000528 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20013e60 	.word	0x20013e60
  ldr r2, =_sidata
 8001028:	080054c4 	.word	0x080054c4
  ldr r2, =_sbss
 800102c:	20013fa0 	.word	0x20013fa0
  ldr r4, =_ebss
 8001030:	200146dc 	.word	0x200146dc

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>

08001036 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f000 f94c 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f805 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001046:	f7ff fcf5 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f967 	bl	8001342 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f92f 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20013e54 	.word	0x20013e54
 80010a8:	20013e5c 	.word	0x20013e5c
 80010ac:	20013e58 	.word	0x20013e58

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20013e5c 	.word	0x20013e5c
 80010d4:	200146d8 	.word	0x200146d8

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200146d8 	.word	0x200146d8

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20013e5c 	.word	0x20013e5c

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	4313      	orrs	r3, r2
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00
 800117c:	05fa0000 	.word	0x05fa0000

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	@ (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	@ (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	@ (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	@ 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	@ 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e014      	b.n	8001396 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	791b      	ldrb	r3, [r3, #4]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d105      	bne.n	8001382 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fb7d 	bl	8000a7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2202      	movs	r2, #2
 8001386:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e046      	b.n	8001440 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	795b      	ldrb	r3, [r3, #5]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d101      	bne.n	80013be <HAL_DAC_Start+0x20>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e040      	b.n	8001440 <HAL_DAC_Start+0xa2>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2201      	movs	r2, #1
 80013d8:	409a      	lsls	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10f      	bne.n	8001408 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80013f2:	2b3c      	cmp	r3, #60	@ 0x3c
 80013f4:	d11d      	bne.n	8001432 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	e014      	b.n	8001432 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	213c      	movs	r1, #60	@ 0x3c
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	429a      	cmp	r2, r3
 8001420:	d107      	bne.n	8001432 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0202 	orr.w	r2, r2, #2
 8001430:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_DAC_Stop+0x14>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e011      	b.n	8001484 <HAL_DAC_Stop+0x38>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2201      	movs	r2, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e015      	b.n	80014d8 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d105      	bne.n	80014c4 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	3308      	adds	r3, #8
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e004      	b.n	80014ce <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	3314      	adds	r3, #20
 80014cc:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	461a      	mov	r2, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	@ 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <HAL_DAC_ConfigChannel+0x1c>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e042      	b.n	800158a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	795b      	ldrb	r3, [r3, #5]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_DAC_ConfigChannel+0x2c>
 800150c:	2302      	movs	r3, #2
 800150e:	e03c      	b.n	800158a <HAL_DAC_ConfigChannel+0xa6>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2201      	movs	r2, #1
 8001514:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2202      	movs	r2, #2
 800151a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6819      	ldr	r1, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	22c0      	movs	r2, #192	@ 0xc0
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2201      	movs	r2, #1
 8001580:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001588:	7ffb      	ldrb	r3, [r7, #31]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fd98 	bl	80010d8 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e099      	b.n	80016e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d4:	e00f      	b.n	80015f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d6:	f7ff fd7f 	bl	80010d8 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d908      	bls.n	80015f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2220      	movs	r2, #32
 80015e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e078      	b.n	80016e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1e8      	bne.n	80015d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <HAL_DMA_Init+0x158>)
 8001610:	4013      	ands	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4313      	orrs	r3, r2
 8001646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164c:	2b04      	cmp	r3, #4
 800164e:	d107      	bne.n	8001660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001658:	4313      	orrs	r3, r2
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4313      	orrs	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f023 0307 	bic.w	r3, r3, #7
 8001676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	2b04      	cmp	r3, #4
 8001688:	d117      	bne.n	80016ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4313      	orrs	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00e      	beq.n	80016ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f9e9 	bl	8001a74 <DMA_CheckFifoParam>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2240      	movs	r2, #64	@ 0x40
 80016ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80016b6:	2301      	movs	r3, #1
 80016b8:	e016      	b.n	80016e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f9a0 	bl	8001a08 <DMA_CalcBaseAndBitshift>
 80016c8:	4603      	mov	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d0:	223f      	movs	r2, #63	@ 0x3f
 80016d2:	409a      	lsls	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	e010803f 	.word	0xe010803f

080016f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001700:	4b8e      	ldr	r3, [pc, #568]	@ (800193c <HAL_DMA_IRQHandler+0x248>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a8e      	ldr	r2, [pc, #568]	@ (8001940 <HAL_DMA_IRQHandler+0x24c>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0a9b      	lsrs	r3, r3, #10
 800170c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171e:	2208      	movs	r2, #8
 8001720:	409a      	lsls	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01a      	beq.n	8001760 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0204 	bic.w	r2, r2, #4
 8001746:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174c:	2208      	movs	r2, #8
 800174e:	409a      	lsls	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001764:	2201      	movs	r2, #1
 8001766:	409a      	lsls	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d012      	beq.n	8001796 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001782:	2201      	movs	r2, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178e:	f043 0202 	orr.w	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179a:	2204      	movs	r2, #4
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d012      	beq.n	80017cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00b      	beq.n	80017cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b8:	2204      	movs	r2, #4
 80017ba:	409a      	lsls	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d0:	2210      	movs	r2, #16
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d043      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d03c      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ee:	2210      	movs	r2, #16
 80017f0:	409a      	lsls	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d018      	beq.n	8001836 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d024      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
 8001822:	e01f      	b.n	8001864 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01b      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
 8001834:	e016      	b.n	8001864 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d107      	bne.n	8001854 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0208 	bic.w	r2, r2, #8
 8001852:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001868:	2220      	movs	r2, #32
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 808f 	beq.w	8001994 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8087 	beq.w	8001994 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188a:	2220      	movs	r2, #32
 800188c:	409a      	lsls	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b05      	cmp	r3, #5
 800189c:	d136      	bne.n	800190c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0216 	bic.w	r2, r2, #22
 80018ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <HAL_DMA_IRQHandler+0x1da>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0208 	bic.w	r2, r2, #8
 80018dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e2:	223f      	movs	r2, #63	@ 0x3f
 80018e4:	409a      	lsls	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d07e      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
        }
        return;
 800190a:	e079      	b.n	8001a00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01d      	beq.n	8001956 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10d      	bne.n	8001944 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192c:	2b00      	cmp	r3, #0
 800192e:	d031      	beq.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
 8001938:	e02c      	b.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
 800193a:	bf00      	nop
 800193c:	20013e54 	.word	0x20013e54
 8001940:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001948:	2b00      	cmp	r3, #0
 800194a:	d023      	beq.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	4798      	blx	r3
 8001954:	e01e      	b.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10f      	bne.n	8001984 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0210 	bic.w	r2, r2, #16
 8001972:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001998:	2b00      	cmp	r3, #0
 800199a:	d032      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d022      	beq.n	80019ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2205      	movs	r2, #5
 80019ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	3301      	adds	r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d307      	bcc.n	80019dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f2      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x2cc>
 80019da:	e000      	b.n	80019de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
 80019fe:	e000      	b.n	8001a02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a00:	bf00      	nop
    }
  }
}
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3b10      	subs	r3, #16
 8001a18:	4a13      	ldr	r2, [pc, #76]	@ (8001a68 <DMA_CalcBaseAndBitshift+0x60>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <DMA_CalcBaseAndBitshift+0x64>)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d908      	bls.n	8001a48 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <DMA_CalcBaseAndBitshift+0x68>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	1d1a      	adds	r2, r3, #4
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a46:	e006      	b.n	8001a56 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <DMA_CalcBaseAndBitshift+0x68>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	aaaaaaab 	.word	0xaaaaaaab
 8001a6c:	080054ac 	.word	0x080054ac
 8001a70:	fffffc00 	.word	0xfffffc00

08001a74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d11f      	bne.n	8001ace <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d856      	bhi.n	8001b42 <DMA_CheckFifoParam+0xce>
 8001a94:	a201      	add	r2, pc, #4	@ (adr r2, 8001a9c <DMA_CheckFifoParam+0x28>)
 8001a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9a:	bf00      	nop
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001abf 	.word	0x08001abf
 8001aa4:	08001aad 	.word	0x08001aad
 8001aa8:	08001b43 	.word	0x08001b43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d046      	beq.n	8001b46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001abc:	e043      	b.n	8001b46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ac6:	d140      	bne.n	8001b4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001acc:	e03d      	b.n	8001b4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ad6:	d121      	bne.n	8001b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d837      	bhi.n	8001b4e <DMA_CheckFifoParam+0xda>
 8001ade:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae4 <DMA_CheckFifoParam+0x70>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001af5 	.word	0x08001af5
 8001ae8:	08001afb 	.word	0x08001afb
 8001aec:	08001af5 	.word	0x08001af5
 8001af0:	08001b0d 	.word	0x08001b0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
      break;
 8001af8:	e030      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d025      	beq.n	8001b52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b0a:	e022      	b.n	8001b52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b14:	d11f      	bne.n	8001b56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b1a:	e01c      	b.n	8001b56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d903      	bls.n	8001b2a <DMA_CheckFifoParam+0xb6>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d003      	beq.n	8001b30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b28:	e018      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b2e:	e015      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00e      	beq.n	8001b5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b40:	e00b      	b.n	8001b5a <DMA_CheckFifoParam+0xe6>
      break;
 8001b42:	bf00      	nop
 8001b44:	e00a      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b46:	bf00      	nop
 8001b48:	e008      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b4a:	bf00      	nop
 8001b4c:	e006      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b4e:	bf00      	nop
 8001b50:	e004      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b52:	bf00      	nop
 8001b54:	e002      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;   
 8001b56:	bf00      	nop
 8001b58:	e000      	b.n	8001b5c <DMA_CheckFifoParam+0xe8>
      break;
 8001b5a:	bf00      	nop
    }
  } 
  
  return status; 
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e086      	b.n	8001c8c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d106      	bne.n	8001b96 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2223      	movs	r2, #35	@ 0x23
 8001b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7fe ffe7 	bl	8000b64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b3f      	ldr	r3, [pc, #252]	@ (8001c94 <HAL_ETH_Init+0x128>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c94 <HAL_ETH_Init+0x128>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8001c94 <HAL_ETH_Init+0x128>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bae:	4b3a      	ldr	r3, [pc, #232]	@ (8001c98 <HAL_ETH_Init+0x12c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a39      	ldr	r2, [pc, #228]	@ (8001c98 <HAL_ETH_Init+0x12c>)
 8001bb4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001bb8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bba:	4b37      	ldr	r3, [pc, #220]	@ (8001c98 <HAL_ETH_Init+0x12c>)
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4935      	ldr	r1, [pc, #212]	@ (8001c98 <HAL_ETH_Init+0x12c>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001bc8:	4b33      	ldr	r3, [pc, #204]	@ (8001c98 <HAL_ETH_Init+0x12c>)
 8001bca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001be2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be4:	f7ff fa78 	bl	80010d8 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bea:	e011      	b.n	8001c10 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001bec:	f7ff fa74 	bl	80010d8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001bfa:	d909      	bls.n	8001c10 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2204      	movs	r2, #4
 8001c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	22e0      	movs	r2, #224	@ 0xe0
 8001c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e03d      	b.n	8001c8c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e4      	bne.n	8001bec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f97a 	bl	8001f1c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fa25 	bl	8002078 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fa7b 	bl	800212a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f9e3 	bl	8002008 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001c50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <HAL_ETH_Init+0x130>)
 8001c60:	430b      	orrs	r3, r1
 8001c62:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001c76:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2210      	movs	r2, #16
 8001c86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	00020060 	.word	0x00020060

08001ca0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <ETH_SetMACConfig+0x164>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	7b9b      	ldrb	r3, [r3, #14]
 8001cbe:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	7c12      	ldrb	r2, [r2, #16]
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d102      	bne.n	8001cce <ETH_SetMACConfig+0x2e>
 8001cc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ccc:	e000      	b.n	8001cd0 <ETH_SetMACConfig+0x30>
 8001cce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cd0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	7c52      	ldrb	r2, [r2, #17]
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	d102      	bne.n	8001ce0 <ETH_SetMACConfig+0x40>
 8001cda:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001cde:	e000      	b.n	8001ce2 <ETH_SetMACConfig+0x42>
 8001ce0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ce2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ce8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7fdb      	ldrb	r3, [r3, #31]
 8001cee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cf0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cf6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	7f92      	ldrb	r2, [r2, #30]
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d102      	bne.n	8001d06 <ETH_SetMACConfig+0x66>
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	e000      	b.n	8001d08 <ETH_SetMACConfig+0x68>
 8001d06:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	7f1b      	ldrb	r3, [r3, #28]
 8001d0e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d10:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	791b      	ldrb	r3, [r3, #4]
 8001d1c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d102      	bne.n	8001d30 <ETH_SetMACConfig+0x90>
 8001d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d2e:	e000      	b.n	8001d32 <ETH_SetMACConfig+0x92>
 8001d30:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	7bdb      	ldrb	r3, [r3, #15]
 8001d38:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d3a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d48:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7ff f9c4 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d86:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d8e:	2a00      	cmp	r2, #0
 8001d90:	d101      	bne.n	8001d96 <ETH_SetMACConfig+0xf6>
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	e000      	b.n	8001d98 <ETH_SetMACConfig+0xf8>
 8001d96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d98:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001da6:	2a01      	cmp	r2, #1
 8001da8:	d101      	bne.n	8001dae <ETH_SetMACConfig+0x10e>
 8001daa:	2208      	movs	r2, #8
 8001dac:	e000      	b.n	8001db0 <ETH_SetMACConfig+0x110>
 8001dae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001db0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001db8:	2a01      	cmp	r2, #1
 8001dba:	d101      	bne.n	8001dc0 <ETH_SetMACConfig+0x120>
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	e000      	b.n	8001dc2 <ETH_SetMACConfig+0x122>
 8001dc0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001dca:	2a01      	cmp	r2, #1
 8001dcc:	d101      	bne.n	8001dd2 <ETH_SetMACConfig+0x132>
 8001dce:	2202      	movs	r2, #2
 8001dd0:	e000      	b.n	8001dd4 <ETH_SetMACConfig+0x134>
 8001dd2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff f97f 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	619a      	str	r2, [r3, #24]
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	fd20810f 	.word	0xfd20810f

08001e08 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4b3d      	ldr	r3, [pc, #244]	@ (8001f18 <ETH_SetDMAConfig+0x110>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	7b1b      	ldrb	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <ETH_SetDMAConfig+0x2c>
 8001e2e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e32:	e000      	b.n	8001e36 <ETH_SetDMAConfig+0x2e>
 8001e34:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	7b5b      	ldrb	r3, [r3, #13]
 8001e3a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e3c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	7f52      	ldrb	r2, [r2, #29]
 8001e42:	2a00      	cmp	r2, #0
 8001e44:	d102      	bne.n	8001e4c <ETH_SetDMAConfig+0x44>
 8001e46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e4a:	e000      	b.n	8001e4e <ETH_SetDMAConfig+0x46>
 8001e4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	7b9b      	ldrb	r3, [r3, #14]
 8001e54:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e56:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e5c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7f1b      	ldrb	r3, [r3, #28]
 8001e62:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e64:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	7f9b      	ldrb	r3, [r3, #30]
 8001e6a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e6c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e72:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e7a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7ff f926 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eac:	461a      	mov	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ebc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ec2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ec8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ed0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ed2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eda:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ee0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001eea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff f8f7 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	f8de3f23 	.word	0xf8de3f23

08001f1c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0a6      	sub	sp, #152	@ 0x98
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fe7f 	bl	8001ca0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fd6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fd8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fdc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff05 	bl	8001e08 <ETH_SetDMAConfig>
}
 8001ffe:	bf00      	nop
 8002000:	3798      	adds	r7, #152	@ 0x98
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3305      	adds	r3, #5
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	3204      	adds	r2, #4
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <ETH_MACAddressConfig+0x68>)
 800202a:	4413      	add	r3, r2
 800202c:	461a      	mov	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3303      	adds	r3, #3
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	061a      	lsls	r2, r3, #24
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3302      	adds	r3, #2
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3301      	adds	r3, #1
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	4313      	orrs	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <ETH_MACAddressConfig+0x6c>)
 800205a:	4413      	add	r3, r2
 800205c:	461a      	mov	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6013      	str	r3, [r2, #0]
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40028040 	.word	0x40028040
 8002074:	40028044 	.word	0x40028044

08002078 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e03e      	b.n	8002104 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68d9      	ldr	r1, [r3, #12]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	3206      	adds	r2, #6
 80020b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d80c      	bhi.n	80020e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68d9      	ldr	r1, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	461a      	mov	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	e004      	b.n	80020f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3301      	adds	r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d9bd      	bls.n	8002086 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211c:	611a      	str	r2, [r3, #16]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e048      	b.n	80021ca <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6919      	ldr	r1, [r3, #16]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2200      	movs	r2, #0
 8002166:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002174:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	3212      	adds	r2, #18
 8002196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d80c      	bhi.n	80021ba <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	e004      	b.n	80021c4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d9b3      	bls.n	8002138 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021fa:	60da      	str	r2, [r3, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	e175      	b.n	8002514 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	429a      	cmp	r2, r3
 8002242:	f040 8164 	bne.w	800250e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d005      	beq.n	800225e <HAL_GPIO_Init+0x56>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d130      	bne.n	80022c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002294:	2201      	movs	r2, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 0201 	and.w	r2, r3, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d017      	beq.n	80022fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d123      	bne.n	8002350 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	08da      	lsrs	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3208      	adds	r2, #8
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0203 	and.w	r2, r3, #3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80be 	beq.w	800250e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	4b66      	ldr	r3, [pc, #408]	@ (800252c <HAL_GPIO_Init+0x324>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a65      	ldr	r2, [pc, #404]	@ (800252c <HAL_GPIO_Init+0x324>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b63      	ldr	r3, [pc, #396]	@ (800252c <HAL_GPIO_Init+0x324>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023aa:	4a61      	ldr	r2, [pc, #388]	@ (8002530 <HAL_GPIO_Init+0x328>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a58      	ldr	r2, [pc, #352]	@ (8002534 <HAL_GPIO_Init+0x32c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d037      	beq.n	8002446 <HAL_GPIO_Init+0x23e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a57      	ldr	r2, [pc, #348]	@ (8002538 <HAL_GPIO_Init+0x330>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d031      	beq.n	8002442 <HAL_GPIO_Init+0x23a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a56      	ldr	r2, [pc, #344]	@ (800253c <HAL_GPIO_Init+0x334>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02b      	beq.n	800243e <HAL_GPIO_Init+0x236>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a55      	ldr	r2, [pc, #340]	@ (8002540 <HAL_GPIO_Init+0x338>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d025      	beq.n	800243a <HAL_GPIO_Init+0x232>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a54      	ldr	r2, [pc, #336]	@ (8002544 <HAL_GPIO_Init+0x33c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <HAL_GPIO_Init+0x22e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a53      	ldr	r2, [pc, #332]	@ (8002548 <HAL_GPIO_Init+0x340>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x22a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a52      	ldr	r2, [pc, #328]	@ (800254c <HAL_GPIO_Init+0x344>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x226>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a51      	ldr	r2, [pc, #324]	@ (8002550 <HAL_GPIO_Init+0x348>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x222>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a50      	ldr	r2, [pc, #320]	@ (8002554 <HAL_GPIO_Init+0x34c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x21e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4f      	ldr	r2, [pc, #316]	@ (8002558 <HAL_GPIO_Init+0x350>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x21a>
 800241e:	2309      	movs	r3, #9
 8002420:	e012      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002422:	230a      	movs	r3, #10
 8002424:	e010      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002426:	2308      	movs	r3, #8
 8002428:	e00e      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800242a:	2307      	movs	r3, #7
 800242c:	e00c      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800242e:	2306      	movs	r3, #6
 8002430:	e00a      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002432:	2305      	movs	r3, #5
 8002434:	e008      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002436:	2304      	movs	r3, #4
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800243a:	2303      	movs	r3, #3
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002446:	2300      	movs	r3, #0
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	f002 0203 	and.w	r2, r2, #3
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	4093      	lsls	r3, r2
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002458:	4935      	ldr	r1, [pc, #212]	@ (8002530 <HAL_GPIO_Init+0x328>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002466:	4b3d      	ldr	r3, [pc, #244]	@ (800255c <HAL_GPIO_Init+0x354>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248a:	4a34      	ldr	r2, [pc, #208]	@ (800255c <HAL_GPIO_Init+0x354>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002490:	4b32      	ldr	r3, [pc, #200]	@ (800255c <HAL_GPIO_Init+0x354>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b4:	4a29      	ldr	r2, [pc, #164]	@ (800255c <HAL_GPIO_Init+0x354>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ba:	4b28      	ldr	r3, [pc, #160]	@ (800255c <HAL_GPIO_Init+0x354>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024de:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <HAL_GPIO_Init+0x354>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <HAL_GPIO_Init+0x354>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <HAL_GPIO_Init+0x354>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	f67f ae86 	bls.w	8002228 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3724      	adds	r7, #36	@ 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40013800 	.word	0x40013800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40020800 	.word	0x40020800
 8002540:	40020c00 	.word	0x40020c00
 8002544:	40021000 	.word	0x40021000
 8002548:	40021400 	.word	0x40021400
 800254c:	40021800 	.word	0x40021800
 8002550:	40021c00 	.word	0x40021c00
 8002554:	40022000 	.word	0x40022000
 8002558:	40022400 	.word	0x40022400
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af02      	add	r7, sp, #8
 8002598:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e108      	b.n	80027b6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fc0e 	bl	8000de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2203      	movs	r2, #3
 80025c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d2:	d102      	bne.n	80025da <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fc8a 	bl	8004ef8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7c1a      	ldrb	r2, [r3, #16]
 80025ec:	f88d 2000 	strb.w	r2, [sp]
 80025f0:	3304      	adds	r3, #4
 80025f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f4:	f002 fc26 	bl	8004e44 <USB_CoreInit>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0d5      	b.n	80027b6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fc82 	bl	8004f1a <USB_SetCurrentMode>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0c6      	b.n	80027b6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	e04a      	b.n	80026c4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	3315      	adds	r3, #21
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	3314      	adds	r3, #20
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	b298      	uxth	r0, r3
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	332e      	adds	r3, #46	@ 0x2e
 800266a:	4602      	mov	r2, r0
 800266c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	3318      	adds	r3, #24
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	331c      	adds	r3, #28
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3320      	adds	r3, #32
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	3324      	adds	r3, #36	@ 0x24
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	3301      	adds	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	791b      	ldrb	r3, [r3, #4]
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d3af      	bcc.n	800262e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e044      	b.n	800275e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	3301      	adds	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	791b      	ldrb	r3, [r3, #4]
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	429a      	cmp	r2, r3
 8002766:	d3b5      	bcc.n	80026d4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7c1a      	ldrb	r2, [r3, #16]
 8002770:	f88d 2000 	strb.w	r2, [sp]
 8002774:	3304      	adds	r3, #4
 8002776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002778:	f002 fc1c 	bl	8004fb4 <USB_DevInit>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2202      	movs	r2, #2
 8002786:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e013      	b.n	80027b6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7b1b      	ldrb	r3, [r3, #12]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f80b 	bl	80027c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fdd7 	bl	8005362 <USB_DevDisconnect>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027ee:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_PCDEx_ActivateLPM+0x44>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	10000003 	.word	0x10000003

08002808 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a04      	ldr	r2, [pc, #16]	@ (8002824 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002816:	6013      	str	r3, [r2, #0]
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40007000 	.word	0x40007000

08002828 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b23      	ldr	r3, [pc, #140]	@ (80028c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	4a22      	ldr	r2, [pc, #136]	@ (80028c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	@ 0x40
 800283e:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800284a:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1d      	ldr	r2, [pc, #116]	@ (80028c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002854:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002856:	f7fe fc3f 	bl	80010d8 <HAL_GetTick>
 800285a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800285c:	e009      	b.n	8002872 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800285e:	f7fe fc3b 	bl	80010d8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800286c:	d901      	bls.n	8002872 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e022      	b.n	80028b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002872:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287e:	d1ee      	bne.n	800285e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0f      	ldr	r2, [pc, #60]	@ (80028c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800288a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800288c:	f7fe fc24 	bl	80010d8 <HAL_GetTick>
 8002890:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002892:	e009      	b.n	80028a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002894:	f7fe fc20 	bl	80010d8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028a2:	d901      	bls.n	80028a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e007      	b.n	80028b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028b4:	d1ee      	bne.n	8002894 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e29b      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8087 	beq.w	80029fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ec:	4b96      	ldr	r3, [pc, #600]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d00c      	beq.n	8002912 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f8:	4b93      	ldr	r3, [pc, #588]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d112      	bne.n	800292a <HAL_RCC_OscConfig+0x62>
 8002904:	4b90      	ldr	r3, [pc, #576]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002910:	d10b      	bne.n	800292a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002912:	4b8d      	ldr	r3, [pc, #564]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d06c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x130>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d168      	bne.n	80029f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e275      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x7a>
 8002934:	4b84      	ldr	r3, [pc, #528]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a83      	ldr	r2, [pc, #524]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 800293a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e02e      	b.n	80029a0 <HAL_RCC_OscConfig+0xd8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x9c>
 800294a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b7c      	ldr	r3, [pc, #496]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7b      	ldr	r2, [pc, #492]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 800295c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e01d      	b.n	80029a0 <HAL_RCC_OscConfig+0xd8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0xc0>
 800296e:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b73      	ldr	r3, [pc, #460]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a72      	ldr	r2, [pc, #456]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0xd8>
 8002988:	4b6f      	ldr	r3, [pc, #444]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b6c      	ldr	r3, [pc, #432]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6b      	ldr	r2, [pc, #428]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 800299a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800299e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fb96 	bl	80010d8 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe fb92 	bl	80010d8 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	@ 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e229      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b61      	ldr	r3, [pc, #388]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0xe8>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fb82 	bl	80010d8 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fb7e 	bl	80010d8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	@ 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e215      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	4b57      	ldr	r3, [pc, #348]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x110>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d069      	beq.n	8002ada <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a06:	4b50      	ldr	r3, [pc, #320]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a12:	4b4d      	ldr	r3, [pc, #308]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d11c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x190>
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d116      	bne.n	8002a58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x17a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e1e9      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	493d      	ldr	r1, [pc, #244]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	e040      	b.n	8002ada <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d023      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a60:	4b39      	ldr	r3, [pc, #228]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a38      	ldr	r2, [pc, #224]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fb34 	bl	80010d8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a74:	f7fe fb30 	bl	80010d8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1c7      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b30      	ldr	r3, [pc, #192]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b2d      	ldr	r3, [pc, #180]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4929      	ldr	r1, [pc, #164]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
 8002aa6:	e018      	b.n	8002ada <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa8:	4b27      	ldr	r3, [pc, #156]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a26      	ldr	r2, [pc, #152]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fb10 	bl	80010d8 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abc:	f7fe fb0c 	bl	80010d8 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1a3      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d038      	beq.n	8002b58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d019      	beq.n	8002b22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aee:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af2:	4a15      	ldr	r2, [pc, #84]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe faed 	bl	80010d8 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe fae9 	bl	80010d8 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e180      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x23a>
 8002b20:	e01a      	b.n	8002b58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b26:	4a08      	ldr	r2, [pc, #32]	@ (8002b48 <HAL_RCC_OscConfig+0x280>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fad3 	bl	80010d8 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fe facf 	bl	80010d8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d903      	bls.n	8002b4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e166      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
 8002b48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	4b92      	ldr	r3, [pc, #584]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ee      	bne.n	8002b36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80a4 	beq.w	8002cae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b66:	4b8c      	ldr	r3, [pc, #560]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10d      	bne.n	8002b8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	4b89      	ldr	r3, [pc, #548]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	4a88      	ldr	r2, [pc, #544]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7e:	4b86      	ldr	r3, [pc, #536]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8e:	4b83      	ldr	r3, [pc, #524]	@ (8002d9c <HAL_RCC_OscConfig+0x4d4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d118      	bne.n	8002bcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b9a:	4b80      	ldr	r3, [pc, #512]	@ (8002d9c <HAL_RCC_OscConfig+0x4d4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7f      	ldr	r2, [pc, #508]	@ (8002d9c <HAL_RCC_OscConfig+0x4d4>)
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fa97 	bl	80010d8 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bae:	f7fe fa93 	bl	80010d8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b64      	cmp	r3, #100	@ 0x64
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e12a      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc0:	4b76      	ldr	r3, [pc, #472]	@ (8002d9c <HAL_RCC_OscConfig+0x4d4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x31a>
 8002bd4:	4b70      	ldr	r3, [pc, #448]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	4a6f      	ldr	r2, [pc, #444]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be0:	e02d      	b.n	8002c3e <HAL_RCC_OscConfig+0x376>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x33c>
 8002bea:	4b6b      	ldr	r3, [pc, #428]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bee:	4a6a      	ldr	r2, [pc, #424]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf6:	4b68      	ldr	r3, [pc, #416]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	4a67      	ldr	r2, [pc, #412]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c02:	e01c      	b.n	8002c3e <HAL_RCC_OscConfig+0x376>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d10c      	bne.n	8002c26 <HAL_RCC_OscConfig+0x35e>
 8002c0c:	4b62      	ldr	r3, [pc, #392]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	4a61      	ldr	r2, [pc, #388]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c18:	4b5f      	ldr	r3, [pc, #380]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c24:	e00b      	b.n	8002c3e <HAL_RCC_OscConfig+0x376>
 8002c26:	4b5c      	ldr	r3, [pc, #368]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c32:	4b59      	ldr	r3, [pc, #356]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	4a58      	ldr	r2, [pc, #352]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c38:	f023 0304 	bic.w	r3, r3, #4
 8002c3c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d015      	beq.n	8002c72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fe fa47 	bl	80010d8 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe fa43 	bl	80010d8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0d8      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	4b4c      	ldr	r3, [pc, #304]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ee      	beq.n	8002c4e <HAL_RCC_OscConfig+0x386>
 8002c70:	e014      	b.n	8002c9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe fa31 	bl	80010d8 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fa2d 	bl	80010d8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0c2      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c90:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ee      	bne.n	8002c7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d105      	bne.n	8002cae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80ae 	beq.w	8002e14 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb8:	4b37      	ldr	r3, [pc, #220]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d06d      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d14b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ccc:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a31      	ldr	r2, [pc, #196]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe f9fe 	bl	80010d8 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe f9fa 	bl	80010d8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e091      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	4b29      	ldr	r3, [pc, #164]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	3b01      	subs	r3, #1
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	071b      	lsls	r3, r3, #28
 8002d2a:	491b      	ldr	r1, [pc, #108]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a18      	ldr	r2, [pc, #96]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe f9cc 	bl	80010d8 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fe f9c8 	bl	80010d8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e05f      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b10      	ldr	r3, [pc, #64]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x47c>
 8002d62:	e057      	b.n	8002e14 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0b      	ldr	r2, [pc, #44]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002d6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe f9b2 	bl	80010d8 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe f9ae 	bl	80010d8 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e045      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <HAL_RCC_OscConfig+0x4d0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x4b0>
 8002d96:	e03d      	b.n	8002e14 <HAL_RCC_OscConfig+0x54c>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002da0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e20 <HAL_RCC_OscConfig+0x558>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d030      	beq.n	8002e10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d129      	bne.n	8002e10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d122      	bne.n	8002e10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d119      	bne.n	8002e10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	3b01      	subs	r3, #1
 8002dea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d10f      	bne.n	8002e10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800

08002e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0d0      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d910      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b67      	ldr	r3, [pc, #412]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 020f 	bic.w	r2, r3, #15
 8002e52:	4965      	ldr	r1, [pc, #404]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b63      	ldr	r3, [pc, #396]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e84:	4b59      	ldr	r3, [pc, #356]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a58      	ldr	r2, [pc, #352]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002e8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e9c:	4b53      	ldr	r3, [pc, #332]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b50      	ldr	r3, [pc, #320]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	494d      	ldr	r1, [pc, #308]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d040      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b47      	ldr	r3, [pc, #284]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d115      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	4b41      	ldr	r3, [pc, #260]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e073      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06b      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	4b39      	ldr	r3, [pc, #228]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4936      	ldr	r1, [pc, #216]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe f8de 	bl	80010d8 <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fe f8da 	bl	80010d8 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e053      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	4b2d      	ldr	r3, [pc, #180]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 020c 	and.w	r2, r3, #12
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1eb      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b27      	ldr	r3, [pc, #156]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d210      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b24      	ldr	r3, [pc, #144]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	4922      	ldr	r1, [pc, #136]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e032      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4916      	ldr	r1, [pc, #88]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fa2:	4b12      	ldr	r3, [pc, #72]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490e      	ldr	r1, [pc, #56]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fb6:	f000 f821 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	490a      	ldr	r1, [pc, #40]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1cc>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	fa22 f303 	lsr.w	r3, r2, r3
 8002fce:	4a09      	ldr	r2, [pc, #36]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1d0>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1d4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe f83a 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08005494 	.word	0x08005494
 8002ff4:	20013e54 	.word	0x20013e54
 8002ff8:	20013e58 	.word	0x20013e58

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003000:	b094      	sub	sp, #80	@ 0x50
 8003002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	647b      	str	r3, [r7, #68]	@ 0x44
 8003008:	2300      	movs	r3, #0
 800300a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800300c:	2300      	movs	r3, #0
 800300e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003014:	4b79      	ldr	r3, [pc, #484]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d00d      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x40>
 8003020:	2b08      	cmp	r3, #8
 8003022:	f200 80e1 	bhi.w	80031e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x34>
 800302a:	2b04      	cmp	r3, #4
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x3a>
 800302e:	e0db      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b73      	ldr	r3, [pc, #460]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x204>)
 8003032:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003034:	e0db      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003036:	4b73      	ldr	r3, [pc, #460]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x208>)
 8003038:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800303a:	e0d8      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4b6f      	ldr	r3, [pc, #444]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003044:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003046:	4b6d      	ldr	r3, [pc, #436]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d063      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b6a      	ldr	r3, [pc, #424]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	2200      	movs	r2, #0
 800305a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800305c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003064:	633b      	str	r3, [r7, #48]	@ 0x30
 8003066:	2300      	movs	r3, #0
 8003068:	637b      	str	r3, [r7, #52]	@ 0x34
 800306a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800306e:	4622      	mov	r2, r4
 8003070:	462b      	mov	r3, r5
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	0159      	lsls	r1, r3, #5
 800307c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003080:	0150      	lsls	r0, r2, #5
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4621      	mov	r1, r4
 8003088:	1a51      	subs	r1, r2, r1
 800308a:	6139      	str	r1, [r7, #16]
 800308c:	4629      	mov	r1, r5
 800308e:	eb63 0301 	sbc.w	r3, r3, r1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030a0:	4659      	mov	r1, fp
 80030a2:	018b      	lsls	r3, r1, #6
 80030a4:	4651      	mov	r1, sl
 80030a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030aa:	4651      	mov	r1, sl
 80030ac:	018a      	lsls	r2, r1, #6
 80030ae:	4651      	mov	r1, sl
 80030b0:	ebb2 0801 	subs.w	r8, r2, r1
 80030b4:	4659      	mov	r1, fp
 80030b6:	eb63 0901 	sbc.w	r9, r3, r1
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ce:	4690      	mov	r8, r2
 80030d0:	4699      	mov	r9, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	eb18 0303 	adds.w	r3, r8, r3
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	462b      	mov	r3, r5
 80030dc:	eb49 0303 	adc.w	r3, r9, r3
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030ee:	4629      	mov	r1, r5
 80030f0:	024b      	lsls	r3, r1, #9
 80030f2:	4621      	mov	r1, r4
 80030f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030f8:	4621      	mov	r1, r4
 80030fa:	024a      	lsls	r2, r1, #9
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003102:	2200      	movs	r2, #0
 8003104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800310c:	f7fd f894 	bl	8000238 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4613      	mov	r3, r2
 8003116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003118:	e058      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311a:	4b38      	ldr	r3, [pc, #224]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	2200      	movs	r2, #0
 8003122:	4618      	mov	r0, r3
 8003124:	4611      	mov	r1, r2
 8003126:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	2300      	movs	r3, #0
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003130:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003134:	4642      	mov	r2, r8
 8003136:	464b      	mov	r3, r9
 8003138:	f04f 0000 	mov.w	r0, #0
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	0159      	lsls	r1, r3, #5
 8003142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003146:	0150      	lsls	r0, r2, #5
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4641      	mov	r1, r8
 800314e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003152:	4649      	mov	r1, r9
 8003154:	eb63 0b01 	sbc.w	fp, r3, r1
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003164:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003168:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800316c:	ebb2 040a 	subs.w	r4, r2, sl
 8003170:	eb63 050b 	sbc.w	r5, r3, fp
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	00eb      	lsls	r3, r5, #3
 800317e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003182:	00e2      	lsls	r2, r4, #3
 8003184:	4614      	mov	r4, r2
 8003186:	461d      	mov	r5, r3
 8003188:	4643      	mov	r3, r8
 800318a:	18e3      	adds	r3, r4, r3
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	464b      	mov	r3, r9
 8003190:	eb45 0303 	adc.w	r3, r5, r3
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031a2:	4629      	mov	r1, r5
 80031a4:	028b      	lsls	r3, r1, #10
 80031a6:	4621      	mov	r1, r4
 80031a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031ac:	4621      	mov	r1, r4
 80031ae:	028a      	lsls	r2, r1, #10
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b6:	2200      	movs	r2, #0
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	61fa      	str	r2, [r7, #28]
 80031bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c0:	f7fd f83a 	bl	8000238 <__aeabi_uldivmod>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4613      	mov	r3, r2
 80031ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031cc:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x200>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80031dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031e6:	e002      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3750      	adds	r7, #80	@ 0x50
 80031f4:	46bd      	mov	sp, r7
 80031f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	00f42400 	.word	0x00f42400
 8003204:	007a1200 	.word	0x007a1200

08003208 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800320c:	4b03      	ldr	r3, [pc, #12]	@ (800321c <HAL_RCC_GetHCLKFreq+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20013e54 	.word	0x20013e54

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003224:	f7ff fff0 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0a9b      	lsrs	r3, r3, #10
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	@ (8003244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	080054a4 	.word	0x080054a4

08003248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800324c:	f7ff ffdc 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0b5b      	lsrs	r3, r3, #13
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4903      	ldr	r1, [pc, #12]	@ (800326c <HAL_RCC_GetPCLK2Freq+0x24>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	080054a4 	.word	0x080054a4

08003270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003298:	4b69      	ldr	r3, [pc, #420]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a68      	ldr	r2, [pc, #416]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80032a2:	6093      	str	r3, [r2, #8]
 80032a4:	4b66      	ldr	r3, [pc, #408]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ac:	4964      	ldr	r1, [pc, #400]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	4959      	ldr	r1, [pc, #356]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032e8:	d101      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003306:	4b4e      	ldr	r3, [pc, #312]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800330c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	494a      	ldr	r1, [pc, #296]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003324:	d101      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003332:	2301      	movs	r3, #1
 8003334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 808b 	beq.w	800346a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b3a      	ldr	r3, [pc, #232]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	4a39      	ldr	r2, [pc, #228]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003360:	4b37      	ldr	r3, [pc, #220]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800336c:	4b35      	ldr	r3, [pc, #212]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a34      	ldr	r2, [pc, #208]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003378:	f7fd feae 	bl	80010d8 <HAL_GetTick>
 800337c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fd feaa 	bl	80010d8 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	@ 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e38f      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003392:	4b2c      	ldr	r3, [pc, #176]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800339e:	4b28      	ldr	r3, [pc, #160]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d035      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d02e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033bc:	4b20      	ldr	r3, [pc, #128]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033de:	4a18      	ldr	r2, [pc, #96]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033e4:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d114      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fd fe72 	bl	80010d8 <HAL_GetTick>
 80033f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fd fe6e 	bl	80010d8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e351      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ee      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003426:	d111      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003436:	400b      	ands	r3, r1
 8003438:	4901      	ldr	r1, [pc, #4]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
 800343e:	e00b      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003440:	40023800 	.word	0x40023800
 8003444:	40007000 	.word	0x40007000
 8003448:	0ffffcff 	.word	0x0ffffcff
 800344c:	4bac      	ldr	r3, [pc, #688]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4aab      	ldr	r2, [pc, #684]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003452:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003456:	6093      	str	r3, [r2, #8]
 8003458:	4ba9      	ldr	r3, [pc, #676]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	49a6      	ldr	r1, [pc, #664]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003466:	4313      	orrs	r3, r2
 8003468:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d010      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003476:	4ba2      	ldr	r3, [pc, #648]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800347c:	4aa0      	ldr	r2, [pc, #640]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003482:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003486:	4b9e      	ldr	r3, [pc, #632]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003488:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	499b      	ldr	r1, [pc, #620]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034a4:	4b96      	ldr	r3, [pc, #600]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034b2:	4993      	ldr	r1, [pc, #588]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c6:	4b8e      	ldr	r3, [pc, #568]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d4:	498a      	ldr	r1, [pc, #552]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e8:	4b85      	ldr	r3, [pc, #532]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f6:	4982      	ldr	r1, [pc, #520]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800350a:	4b7d      	ldr	r3, [pc, #500]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003510:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003518:	4979      	ldr	r1, [pc, #484]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800352c:	4b74      	ldr	r3, [pc, #464]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	4971      	ldr	r1, [pc, #452]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800354e:	4b6c      	ldr	r3, [pc, #432]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003554:	f023 020c 	bic.w	r2, r3, #12
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355c:	4968      	ldr	r1, [pc, #416]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003570:	4b63      	ldr	r3, [pc, #396]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357e:	4960      	ldr	r1, [pc, #384]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003592:	4b5b      	ldr	r3, [pc, #364]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a0:	4957      	ldr	r1, [pc, #348]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035b4:	4b52      	ldr	r3, [pc, #328]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	494f      	ldr	r1, [pc, #316]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e4:	4946      	ldr	r1, [pc, #280]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035f8:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003606:	493e      	ldr	r1, [pc, #248]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800361a:	4b39      	ldr	r3, [pc, #228]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003620:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003628:	4935      	ldr	r1, [pc, #212]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800363c:	4b30      	ldr	r3, [pc, #192]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800364a:	492d      	ldr	r1, [pc, #180]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d011      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800365e:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003664:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800366c:	4924      	ldr	r1, [pc, #144]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800368e:	2301      	movs	r3, #1
 8003690:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800369e:	4b18      	ldr	r3, [pc, #96]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ac:	4914      	ldr	r1, [pc, #80]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d0:	490b      	ldr	r1, [pc, #44]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00f      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f4:	4902      	ldr	r1, [pc, #8]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036fc:	e002      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003710:	4b8a      	ldr	r3, [pc, #552]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003716:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003720:	4986      	ldr	r1, [pc, #536]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003734:	4b81      	ldr	r3, [pc, #516]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800373a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003744:	497d      	ldr	r1, [pc, #500]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d006      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80d6 	beq.w	800390c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003760:	4b76      	ldr	r3, [pc, #472]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a75      	ldr	r2, [pc, #468]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003766:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800376a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fd fcb4 	bl	80010d8 <HAL_GetTick>
 8003770:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003774:	f7fd fcb0 	bl	80010d8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	@ 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e195      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003786:	4b6d      	ldr	r3, [pc, #436]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d021      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11d      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037a6:	4b65      	ldr	r3, [pc, #404]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037b4:	4b61      	ldr	r3, [pc, #388]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ba:	0e1b      	lsrs	r3, r3, #24
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	019a      	lsls	r2, r3, #6
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	071b      	lsls	r3, r3, #28
 80037da:	4958      	ldr	r1, [pc, #352]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02e      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800380c:	d129      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800380e:	4b4b      	ldr	r3, [pc, #300]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800381c:	4b47      	ldr	r3, [pc, #284]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003822:	0f1b      	lsrs	r3, r3, #28
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	019a      	lsls	r2, r3, #6
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	061b      	lsls	r3, r3, #24
 800383c:	431a      	orrs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	071b      	lsls	r3, r3, #28
 8003842:	493e      	ldr	r1, [pc, #248]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800384a:	4b3c      	ldr	r3, [pc, #240]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003850:	f023 021f 	bic.w	r2, r3, #31
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	3b01      	subs	r3, #1
 800385a:	4938      	ldr	r1, [pc, #224]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01d      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800386e:	4b33      	ldr	r3, [pc, #204]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003874:	0e1b      	lsrs	r3, r3, #24
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800387c:	4b2f      	ldr	r3, [pc, #188]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003882:	0f1b      	lsrs	r3, r3, #28
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	019a      	lsls	r2, r3, #6
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	041b      	lsls	r3, r3, #16
 8003896:	431a      	orrs	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	431a      	orrs	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	071b      	lsls	r3, r3, #28
 80038a2:	4926      	ldr	r1, [pc, #152]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d011      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	019a      	lsls	r2, r3, #6
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	071b      	lsls	r3, r3, #28
 80038d2:	491a      	ldr	r1, [pc, #104]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038da:	4b18      	ldr	r3, [pc, #96]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a17      	ldr	r2, [pc, #92]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e6:	f7fd fbf7 	bl	80010d8 <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038ee:	f7fd fbf3 	bl	80010d8 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b64      	cmp	r3, #100	@ 0x64
 80038fa:	d901      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e0d8      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003900:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b01      	cmp	r3, #1
 8003910:	f040 80ce 	bne.w	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003914:	4b09      	ldr	r3, [pc, #36]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a08      	ldr	r2, [pc, #32]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800391e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003920:	f7fd fbda 	bl	80010d8 <HAL_GetTick>
 8003924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003926:	e00b      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003928:	f7fd fbd6 	bl	80010d8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	@ 0x64
 8003934:	d904      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0bb      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003940:	4b5e      	ldr	r3, [pc, #376]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800394c:	d0ec      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02e      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d12a      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003976:	4b51      	ldr	r3, [pc, #324]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003984:	4b4d      	ldr	r3, [pc, #308]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398a:	0f1b      	lsrs	r3, r3, #28
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	019a      	lsls	r2, r3, #6
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	061b      	lsls	r3, r3, #24
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	071b      	lsls	r3, r3, #28
 80039aa:	4944      	ldr	r1, [pc, #272]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039b2:	4b42      	ldr	r3, [pc, #264]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	3b01      	subs	r3, #1
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	493d      	ldr	r1, [pc, #244]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d022      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039e0:	d11d      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039e2:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e8:	0e1b      	lsrs	r3, r3, #24
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039f0:	4b32      	ldr	r3, [pc, #200]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f6:	0f1b      	lsrs	r3, r3, #28
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	019a      	lsls	r2, r3, #6
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	041b      	lsls	r3, r3, #16
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	061b      	lsls	r3, r3, #24
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	071b      	lsls	r3, r3, #28
 8003a16:	4929      	ldr	r1, [pc, #164]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d028      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a2a:	4b24      	ldr	r3, [pc, #144]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a38:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	0c1b      	lsrs	r3, r3, #16
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	019a      	lsls	r2, r3, #6
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	431a      	orrs	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	071b      	lsls	r3, r3, #28
 8003a5e:	4917      	ldr	r1, [pc, #92]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a66:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	4911      	ldr	r1, [pc, #68]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0e      	ldr	r2, [pc, #56]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fd fb26 	bl	80010d8 <HAL_GetTick>
 8003a8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a90:	f7fd fb22 	bl	80010d8 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	@ 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e007      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aae:	d1ef      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e049      	b.n	8003b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd f8f4 	bl	8000cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f000 fae0 	bl	80040c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d001      	beq.n	8003b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e054      	b.n	8003c32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a26      	ldr	r2, [pc, #152]	@ (8003c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a22      	ldr	r2, [pc, #136]	@ (8003c44 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a21      	ldr	r2, [pc, #132]	@ (8003c48 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c4c <HAL_TIM_Base_Start_IT+0xdc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <HAL_TIM_Base_Start_IT+0xe0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <HAL_TIM_Base_Start_IT+0xe4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1b      	ldr	r2, [pc, #108]	@ (8003c58 <HAL_TIM_Base_Start_IT+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d115      	bne.n	8003c1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <HAL_TIM_Base_Start_IT+0xec>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d015      	beq.n	8003c2e <HAL_TIM_Base_Start_IT+0xbe>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c08:	d011      	beq.n	8003c2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1a:	e008      	b.n	8003c2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e000      	b.n	8003c30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00
 8003c50:	40010400 	.word	0x40010400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40001800 	.word	0x40001800
 8003c5c:	00010007 	.word	0x00010007

08003c60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10f      	bne.n	8003ca8 <HAL_TIM_Base_Stop_IT+0x48>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_Base_Stop_IT+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01b      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0202 	mvn.w	r2, #2
 8003cf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f9bd 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 8003d0e:	e005      	b.n	8003d1c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f9af 	bl	8004074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f9c0 	bl	800409c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d020      	beq.n	8003d6e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01b      	beq.n	8003d6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0204 	mvn.w	r2, #4
 8003d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f997 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 8003d5a:	e005      	b.n	8003d68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f989 	bl	8004074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f99a 	bl	800409c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01b      	beq.n	8003dba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0208 	mvn.w	r2, #8
 8003d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f971 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 8003da6:	e005      	b.n	8003db4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f963 	bl	8004074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f974 	bl	800409c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01b      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f06f 0210 	mvn.w	r2, #16
 8003dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2208      	movs	r2, #8
 8003ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f94b 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 8003df2:	e005      	b.n	8003e00 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f93d 	bl	8004074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f94e 	bl	800409c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00c      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0201 	mvn.w	r2, #1
 8003e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f91b 	bl	8004060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fb14 	bl	8004480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fb0c 	bl	8004494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f908 	bl	80040b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0220 	mvn.w	r2, #32
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fad4 	bl	800446c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e0b4      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x186>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	4b56      	ldr	r3, [pc, #344]	@ (800405c <HAL_TIM_ConfigClockSource+0x190>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f20:	d03e      	beq.n	8003fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f26:	f200 8087 	bhi.w	8004038 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2e:	f000 8086 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x172>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f36:	d87f      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b70      	cmp	r3, #112	@ 0x70
 8003f3a:	d01a      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0xa6>
 8003f3c:	2b70      	cmp	r3, #112	@ 0x70
 8003f3e:	d87b      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b60      	cmp	r3, #96	@ 0x60
 8003f42:	d050      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f44:	2b60      	cmp	r3, #96	@ 0x60
 8003f46:	d877      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b50      	cmp	r3, #80	@ 0x50
 8003f4a:	d03c      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f4c:	2b50      	cmp	r3, #80	@ 0x50
 8003f4e:	d873      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	d058      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x13a>
 8003f54:	2b40      	cmp	r3, #64	@ 0x40
 8003f56:	d86f      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b30      	cmp	r3, #48	@ 0x30
 8003f5a:	d064      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15a>
 8003f5c:	2b30      	cmp	r3, #48	@ 0x30
 8003f5e:	d86b      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d060      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15a>
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d867      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x16c>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05c      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15a>
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d05a      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15a>
 8003f70:	e062      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f82:	f000 f9c5 	bl	8004310 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	609a      	str	r2, [r3, #8]
      break;
 8003f9e:	e04f      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fb0:	f000 f9ae 	bl	8004310 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fc2:	609a      	str	r2, [r3, #8]
      break;
 8003fc4:	e03c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f000 f922 	bl	800421c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2150      	movs	r1, #80	@ 0x50
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f97b 	bl	80042da <TIM_ITRx_SetConfig>
      break;
 8003fe4:	e02c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f000 f941 	bl	800427a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2160      	movs	r1, #96	@ 0x60
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f96b 	bl	80042da <TIM_ITRx_SetConfig>
      break;
 8004004:	e01c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004012:	461a      	mov	r2, r3
 8004014:	f000 f902 	bl	800421c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2140      	movs	r1, #64	@ 0x40
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f95b 	bl	80042da <TIM_ITRx_SetConfig>
      break;
 8004024:	e00c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f000 f952 	bl	80042da <TIM_ITRx_SetConfig>
      break;
 8004036:	e003      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      break;
 800403c:	e000      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800403e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	fffeff88 	.word	0xfffeff88

08004060 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a46      	ldr	r2, [pc, #280]	@ (80041f0 <TIM_Base_SetConfig+0x12c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e2:	d00f      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a43      	ldr	r2, [pc, #268]	@ (80041f4 <TIM_Base_SetConfig+0x130>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a42      	ldr	r2, [pc, #264]	@ (80041f8 <TIM_Base_SetConfig+0x134>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a41      	ldr	r2, [pc, #260]	@ (80041fc <TIM_Base_SetConfig+0x138>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a40      	ldr	r2, [pc, #256]	@ (8004200 <TIM_Base_SetConfig+0x13c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a35      	ldr	r2, [pc, #212]	@ (80041f0 <TIM_Base_SetConfig+0x12c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004124:	d027      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a32      	ldr	r2, [pc, #200]	@ (80041f4 <TIM_Base_SetConfig+0x130>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d023      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a31      	ldr	r2, [pc, #196]	@ (80041f8 <TIM_Base_SetConfig+0x134>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01f      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a30      	ldr	r2, [pc, #192]	@ (80041fc <TIM_Base_SetConfig+0x138>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2f      	ldr	r2, [pc, #188]	@ (8004200 <TIM_Base_SetConfig+0x13c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d017      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2e      	ldr	r2, [pc, #184]	@ (8004204 <TIM_Base_SetConfig+0x140>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2d      	ldr	r2, [pc, #180]	@ (8004208 <TIM_Base_SetConfig+0x144>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2c      	ldr	r2, [pc, #176]	@ (800420c <TIM_Base_SetConfig+0x148>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2b      	ldr	r2, [pc, #172]	@ (8004210 <TIM_Base_SetConfig+0x14c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2a      	ldr	r2, [pc, #168]	@ (8004214 <TIM_Base_SetConfig+0x150>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a29      	ldr	r2, [pc, #164]	@ (8004218 <TIM_Base_SetConfig+0x154>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800417c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a10      	ldr	r2, [pc, #64]	@ (80041f0 <TIM_Base_SetConfig+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0xf8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a12      	ldr	r2, [pc, #72]	@ (8004200 <TIM_Base_SetConfig+0x13c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]
  }
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40010400 	.word	0x40010400
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800
 8004210:	40001800 	.word	0x40001800
 8004214:	40001c00 	.word	0x40001c00
 8004218:	40002000 	.word	0x40002000

0800421c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f023 0201 	bic.w	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f023 030a 	bic.w	r3, r3, #10
 8004258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800427a:	b480      	push	{r7}
 800427c:	b087      	sub	sp, #28
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f023 0210 	bic.w	r2, r3, #16
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	031b      	lsls	r3, r3, #12
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f043 0307 	orr.w	r3, r3, #7
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	609a      	str	r2, [r3, #8]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800432a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	021a      	lsls	r2, r3, #8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	431a      	orrs	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	609a      	str	r2, [r3, #8]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004364:	2302      	movs	r3, #2
 8004366:	e06d      	b.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a30      	ldr	r2, [pc, #192]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2f      	ldr	r2, [pc, #188]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d108      	bne.n	80043ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a20      	ldr	r2, [pc, #128]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d022      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043da:	d01d      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d018      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1c      	ldr	r2, [pc, #112]	@ (800445c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d013      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004460 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00e      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a15      	ldr	r2, [pc, #84]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d009      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a16      	ldr	r2, [pc, #88]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a15      	ldr	r2, [pc, #84]	@ (8004468 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d10c      	bne.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800441e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	4313      	orrs	r3, r2
 8004428:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40010000 	.word	0x40010000
 8004454:	40010400 	.word	0x40010400
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40014000 	.word	0x40014000
 8004468:	40001800 	.word	0x40001800

0800446c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e040      	b.n	800453c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc fc28 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	@ 0x24
 80044d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa8c 	bl	8004a0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f825 	bl	8004544 <UART_SetConfig>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e01b      	b.n	800453c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fb0b 	bl	8004b50 <UART_CheckIdleState>
 800453a:	4603      	mov	r3, r0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4ba6      	ldr	r3, [pc, #664]	@ (8004808 <UART_SetConfig+0x2c4>)
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	6979      	ldr	r1, [r7, #20]
 8004578:	430b      	orrs	r3, r1
 800457a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a94      	ldr	r2, [pc, #592]	@ (800480c <UART_SetConfig+0x2c8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d120      	bne.n	8004602 <UART_SetConfig+0xbe>
 80045c0:	4b93      	ldr	r3, [pc, #588]	@ (8004810 <UART_SetConfig+0x2cc>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d816      	bhi.n	80045fc <UART_SetConfig+0xb8>
 80045ce:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <UART_SetConfig+0x90>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	080045f1 	.word	0x080045f1
 80045dc:	080045eb 	.word	0x080045eb
 80045e0:	080045f7 	.word	0x080045f7
 80045e4:	2301      	movs	r3, #1
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e150      	b.n	800488c <UART_SetConfig+0x348>
 80045ea:	2302      	movs	r3, #2
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e14d      	b.n	800488c <UART_SetConfig+0x348>
 80045f0:	2304      	movs	r3, #4
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e14a      	b.n	800488c <UART_SetConfig+0x348>
 80045f6:	2308      	movs	r3, #8
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e147      	b.n	800488c <UART_SetConfig+0x348>
 80045fc:	2310      	movs	r3, #16
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e144      	b.n	800488c <UART_SetConfig+0x348>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a83      	ldr	r2, [pc, #524]	@ (8004814 <UART_SetConfig+0x2d0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d132      	bne.n	8004672 <UART_SetConfig+0x12e>
 800460c:	4b80      	ldr	r3, [pc, #512]	@ (8004810 <UART_SetConfig+0x2cc>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d828      	bhi.n	800466c <UART_SetConfig+0x128>
 800461a:	a201      	add	r2, pc, #4	@ (adr r2, 8004620 <UART_SetConfig+0xdc>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004655 	.word	0x08004655
 8004624:	0800466d 	.word	0x0800466d
 8004628:	0800466d 	.word	0x0800466d
 800462c:	0800466d 	.word	0x0800466d
 8004630:	08004661 	.word	0x08004661
 8004634:	0800466d 	.word	0x0800466d
 8004638:	0800466d 	.word	0x0800466d
 800463c:	0800466d 	.word	0x0800466d
 8004640:	0800465b 	.word	0x0800465b
 8004644:	0800466d 	.word	0x0800466d
 8004648:	0800466d 	.word	0x0800466d
 800464c:	0800466d 	.word	0x0800466d
 8004650:	08004667 	.word	0x08004667
 8004654:	2300      	movs	r3, #0
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e118      	b.n	800488c <UART_SetConfig+0x348>
 800465a:	2302      	movs	r3, #2
 800465c:	77fb      	strb	r3, [r7, #31]
 800465e:	e115      	b.n	800488c <UART_SetConfig+0x348>
 8004660:	2304      	movs	r3, #4
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e112      	b.n	800488c <UART_SetConfig+0x348>
 8004666:	2308      	movs	r3, #8
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e10f      	b.n	800488c <UART_SetConfig+0x348>
 800466c:	2310      	movs	r3, #16
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e10c      	b.n	800488c <UART_SetConfig+0x348>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a68      	ldr	r2, [pc, #416]	@ (8004818 <UART_SetConfig+0x2d4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d120      	bne.n	80046be <UART_SetConfig+0x17a>
 800467c:	4b64      	ldr	r3, [pc, #400]	@ (8004810 <UART_SetConfig+0x2cc>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004682:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004686:	2b30      	cmp	r3, #48	@ 0x30
 8004688:	d013      	beq.n	80046b2 <UART_SetConfig+0x16e>
 800468a:	2b30      	cmp	r3, #48	@ 0x30
 800468c:	d814      	bhi.n	80046b8 <UART_SetConfig+0x174>
 800468e:	2b20      	cmp	r3, #32
 8004690:	d009      	beq.n	80046a6 <UART_SetConfig+0x162>
 8004692:	2b20      	cmp	r3, #32
 8004694:	d810      	bhi.n	80046b8 <UART_SetConfig+0x174>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <UART_SetConfig+0x15c>
 800469a:	2b10      	cmp	r3, #16
 800469c:	d006      	beq.n	80046ac <UART_SetConfig+0x168>
 800469e:	e00b      	b.n	80046b8 <UART_SetConfig+0x174>
 80046a0:	2300      	movs	r3, #0
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e0f2      	b.n	800488c <UART_SetConfig+0x348>
 80046a6:	2302      	movs	r3, #2
 80046a8:	77fb      	strb	r3, [r7, #31]
 80046aa:	e0ef      	b.n	800488c <UART_SetConfig+0x348>
 80046ac:	2304      	movs	r3, #4
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e0ec      	b.n	800488c <UART_SetConfig+0x348>
 80046b2:	2308      	movs	r3, #8
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e0e9      	b.n	800488c <UART_SetConfig+0x348>
 80046b8:	2310      	movs	r3, #16
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e0e6      	b.n	800488c <UART_SetConfig+0x348>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a56      	ldr	r2, [pc, #344]	@ (800481c <UART_SetConfig+0x2d8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d120      	bne.n	800470a <UART_SetConfig+0x1c6>
 80046c8:	4b51      	ldr	r3, [pc, #324]	@ (8004810 <UART_SetConfig+0x2cc>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80046d4:	d013      	beq.n	80046fe <UART_SetConfig+0x1ba>
 80046d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80046d8:	d814      	bhi.n	8004704 <UART_SetConfig+0x1c0>
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d009      	beq.n	80046f2 <UART_SetConfig+0x1ae>
 80046de:	2b80      	cmp	r3, #128	@ 0x80
 80046e0:	d810      	bhi.n	8004704 <UART_SetConfig+0x1c0>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <UART_SetConfig+0x1a8>
 80046e6:	2b40      	cmp	r3, #64	@ 0x40
 80046e8:	d006      	beq.n	80046f8 <UART_SetConfig+0x1b4>
 80046ea:	e00b      	b.n	8004704 <UART_SetConfig+0x1c0>
 80046ec:	2300      	movs	r3, #0
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e0cc      	b.n	800488c <UART_SetConfig+0x348>
 80046f2:	2302      	movs	r3, #2
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e0c9      	b.n	800488c <UART_SetConfig+0x348>
 80046f8:	2304      	movs	r3, #4
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e0c6      	b.n	800488c <UART_SetConfig+0x348>
 80046fe:	2308      	movs	r3, #8
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e0c3      	b.n	800488c <UART_SetConfig+0x348>
 8004704:	2310      	movs	r3, #16
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e0c0      	b.n	800488c <UART_SetConfig+0x348>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a44      	ldr	r2, [pc, #272]	@ (8004820 <UART_SetConfig+0x2dc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d125      	bne.n	8004760 <UART_SetConfig+0x21c>
 8004714:	4b3e      	ldr	r3, [pc, #248]	@ (8004810 <UART_SetConfig+0x2cc>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004722:	d017      	beq.n	8004754 <UART_SetConfig+0x210>
 8004724:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004728:	d817      	bhi.n	800475a <UART_SetConfig+0x216>
 800472a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800472e:	d00b      	beq.n	8004748 <UART_SetConfig+0x204>
 8004730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004734:	d811      	bhi.n	800475a <UART_SetConfig+0x216>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <UART_SetConfig+0x1fe>
 800473a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473e:	d006      	beq.n	800474e <UART_SetConfig+0x20a>
 8004740:	e00b      	b.n	800475a <UART_SetConfig+0x216>
 8004742:	2300      	movs	r3, #0
 8004744:	77fb      	strb	r3, [r7, #31]
 8004746:	e0a1      	b.n	800488c <UART_SetConfig+0x348>
 8004748:	2302      	movs	r3, #2
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e09e      	b.n	800488c <UART_SetConfig+0x348>
 800474e:	2304      	movs	r3, #4
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e09b      	b.n	800488c <UART_SetConfig+0x348>
 8004754:	2308      	movs	r3, #8
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e098      	b.n	800488c <UART_SetConfig+0x348>
 800475a:	2310      	movs	r3, #16
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e095      	b.n	800488c <UART_SetConfig+0x348>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2f      	ldr	r2, [pc, #188]	@ (8004824 <UART_SetConfig+0x2e0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d125      	bne.n	80047b6 <UART_SetConfig+0x272>
 800476a:	4b29      	ldr	r3, [pc, #164]	@ (8004810 <UART_SetConfig+0x2cc>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004770:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004774:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004778:	d017      	beq.n	80047aa <UART_SetConfig+0x266>
 800477a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800477e:	d817      	bhi.n	80047b0 <UART_SetConfig+0x26c>
 8004780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004784:	d00b      	beq.n	800479e <UART_SetConfig+0x25a>
 8004786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800478a:	d811      	bhi.n	80047b0 <UART_SetConfig+0x26c>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <UART_SetConfig+0x254>
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004794:	d006      	beq.n	80047a4 <UART_SetConfig+0x260>
 8004796:	e00b      	b.n	80047b0 <UART_SetConfig+0x26c>
 8004798:	2301      	movs	r3, #1
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e076      	b.n	800488c <UART_SetConfig+0x348>
 800479e:	2302      	movs	r3, #2
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e073      	b.n	800488c <UART_SetConfig+0x348>
 80047a4:	2304      	movs	r3, #4
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e070      	b.n	800488c <UART_SetConfig+0x348>
 80047aa:	2308      	movs	r3, #8
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e06d      	b.n	800488c <UART_SetConfig+0x348>
 80047b0:	2310      	movs	r3, #16
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e06a      	b.n	800488c <UART_SetConfig+0x348>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <UART_SetConfig+0x2e4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d138      	bne.n	8004832 <UART_SetConfig+0x2ee>
 80047c0:	4b13      	ldr	r3, [pc, #76]	@ (8004810 <UART_SetConfig+0x2cc>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80047ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047ce:	d017      	beq.n	8004800 <UART_SetConfig+0x2bc>
 80047d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047d4:	d82a      	bhi.n	800482c <UART_SetConfig+0x2e8>
 80047d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047da:	d00b      	beq.n	80047f4 <UART_SetConfig+0x2b0>
 80047dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047e0:	d824      	bhi.n	800482c <UART_SetConfig+0x2e8>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <UART_SetConfig+0x2aa>
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ea:	d006      	beq.n	80047fa <UART_SetConfig+0x2b6>
 80047ec:	e01e      	b.n	800482c <UART_SetConfig+0x2e8>
 80047ee:	2300      	movs	r3, #0
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	e04b      	b.n	800488c <UART_SetConfig+0x348>
 80047f4:	2302      	movs	r3, #2
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e048      	b.n	800488c <UART_SetConfig+0x348>
 80047fa:	2304      	movs	r3, #4
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e045      	b.n	800488c <UART_SetConfig+0x348>
 8004800:	2308      	movs	r3, #8
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e042      	b.n	800488c <UART_SetConfig+0x348>
 8004806:	bf00      	nop
 8004808:	efff69f3 	.word	0xefff69f3
 800480c:	40011000 	.word	0x40011000
 8004810:	40023800 	.word	0x40023800
 8004814:	40004400 	.word	0x40004400
 8004818:	40004800 	.word	0x40004800
 800481c:	40004c00 	.word	0x40004c00
 8004820:	40005000 	.word	0x40005000
 8004824:	40011400 	.word	0x40011400
 8004828:	40007800 	.word	0x40007800
 800482c:	2310      	movs	r3, #16
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e02c      	b.n	800488c <UART_SetConfig+0x348>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a72      	ldr	r2, [pc, #456]	@ (8004a00 <UART_SetConfig+0x4bc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d125      	bne.n	8004888 <UART_SetConfig+0x344>
 800483c:	4b71      	ldr	r3, [pc, #452]	@ (8004a04 <UART_SetConfig+0x4c0>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004842:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004846:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800484a:	d017      	beq.n	800487c <UART_SetConfig+0x338>
 800484c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004850:	d817      	bhi.n	8004882 <UART_SetConfig+0x33e>
 8004852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004856:	d00b      	beq.n	8004870 <UART_SetConfig+0x32c>
 8004858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800485c:	d811      	bhi.n	8004882 <UART_SetConfig+0x33e>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <UART_SetConfig+0x326>
 8004862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004866:	d006      	beq.n	8004876 <UART_SetConfig+0x332>
 8004868:	e00b      	b.n	8004882 <UART_SetConfig+0x33e>
 800486a:	2300      	movs	r3, #0
 800486c:	77fb      	strb	r3, [r7, #31]
 800486e:	e00d      	b.n	800488c <UART_SetConfig+0x348>
 8004870:	2302      	movs	r3, #2
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e00a      	b.n	800488c <UART_SetConfig+0x348>
 8004876:	2304      	movs	r3, #4
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e007      	b.n	800488c <UART_SetConfig+0x348>
 800487c:	2308      	movs	r3, #8
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e004      	b.n	800488c <UART_SetConfig+0x348>
 8004882:	2310      	movs	r3, #16
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e001      	b.n	800488c <UART_SetConfig+0x348>
 8004888:	2310      	movs	r3, #16
 800488a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004894:	d15b      	bne.n	800494e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004896:	7ffb      	ldrb	r3, [r7, #31]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d828      	bhi.n	80048ee <UART_SetConfig+0x3aa>
 800489c:	a201      	add	r2, pc, #4	@ (adr r2, 80048a4 <UART_SetConfig+0x360>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	080048ef 	.word	0x080048ef
 80048b4:	080048df 	.word	0x080048df
 80048b8:	080048ef 	.word	0x080048ef
 80048bc:	080048ef 	.word	0x080048ef
 80048c0:	080048ef 	.word	0x080048ef
 80048c4:	080048e7 	.word	0x080048e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c8:	f7fe fcaa 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 80048cc:	61b8      	str	r0, [r7, #24]
        break;
 80048ce:	e013      	b.n	80048f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d0:	f7fe fcba 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 80048d4:	61b8      	str	r0, [r7, #24]
        break;
 80048d6:	e00f      	b.n	80048f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004a08 <UART_SetConfig+0x4c4>)
 80048da:	61bb      	str	r3, [r7, #24]
        break;
 80048dc:	e00c      	b.n	80048f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048de:	f7fe fb8d 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 80048e2:	61b8      	str	r0, [r7, #24]
        break;
 80048e4:	e008      	b.n	80048f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ea:	61bb      	str	r3, [r7, #24]
        break;
 80048ec:	e004      	b.n	80048f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	77bb      	strb	r3, [r7, #30]
        break;
 80048f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d074      	beq.n	80049e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	005a      	lsls	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	441a      	add	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004912:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	d916      	bls.n	8004948 <UART_SetConfig+0x404>
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d212      	bcs.n	8004948 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f023 030f 	bic.w	r3, r3, #15
 800492a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	b29a      	uxth	r2, r3
 8004938:	89fb      	ldrh	r3, [r7, #14]
 800493a:	4313      	orrs	r3, r2
 800493c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	89fa      	ldrh	r2, [r7, #14]
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	e04f      	b.n	80049e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	77bb      	strb	r3, [r7, #30]
 800494c:	e04c      	b.n	80049e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800494e:	7ffb      	ldrb	r3, [r7, #31]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d828      	bhi.n	80049a6 <UART_SetConfig+0x462>
 8004954:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <UART_SetConfig+0x418>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004997 	.word	0x08004997
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049a7 	.word	0x080049a7
 8004978:	080049a7 	.word	0x080049a7
 800497c:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fe fc4e 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8004984:	61b8      	str	r0, [r7, #24]
        break;
 8004986:	e013      	b.n	80049b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7fe fc5e 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 800498c:	61b8      	str	r0, [r7, #24]
        break;
 800498e:	e00f      	b.n	80049b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b1d      	ldr	r3, [pc, #116]	@ (8004a08 <UART_SetConfig+0x4c4>)
 8004992:	61bb      	str	r3, [r7, #24]
        break;
 8004994:	e00c      	b.n	80049b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe fb31 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 800499a:	61b8      	str	r0, [r7, #24]
        break;
 800499c:	e008      	b.n	80049b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a2:	61bb      	str	r3, [r7, #24]
        break;
 80049a4:	e004      	b.n	80049b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	77bb      	strb	r3, [r7, #30]
        break;
 80049ae:	bf00      	nop
    }

    if (pclk != 0U)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d018      	beq.n	80049e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	085a      	lsrs	r2, r3, #1
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	441a      	add	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b0f      	cmp	r3, #15
 80049ce:	d909      	bls.n	80049e4 <UART_SetConfig+0x4a0>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d6:	d205      	bcs.n	80049e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60da      	str	r2, [r3, #12]
 80049e2:	e001      	b.n	80049e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40007c00 	.word	0x40007c00
 8004a04:	40023800 	.word	0x40023800
 8004a08:	00f42400 	.word	0x00f42400

08004a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0a:	d10a      	bne.n	8004b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b098      	sub	sp, #96	@ 0x60
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b60:	f7fc faba 	bl	80010d8 <HAL_GetTick>
 8004b64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d12e      	bne.n	8004bd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f88c 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d021      	beq.n	8004bd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e6      	bne.n	8004b8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e062      	b.n	8004c98 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d149      	bne.n	8004c74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be8:	2200      	movs	r2, #0
 8004bea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f856 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d03c      	beq.n	8004c74 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	623b      	str	r3, [r7, #32]
   return(result);
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e6      	bne.n	8004bfa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c4c:	61fa      	str	r2, [r7, #28]
 8004c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	69b9      	ldr	r1, [r7, #24]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e5      	bne.n	8004c2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e011      	b.n	8004c98 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3758      	adds	r7, #88	@ 0x58
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb0:	e04f      	b.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d04b      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fc fa0d 	bl	80010d8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e04e      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d037      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b80      	cmp	r3, #128	@ 0x80
 8004ce6:	d034      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b40      	cmp	r3, #64	@ 0x40
 8004cec:	d031      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d110      	bne.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2208      	movs	r2, #8
 8004d02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f838 	bl	8004d7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e029      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d2c:	d111      	bne.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f81e 	bl	8004d7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e00f      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d0a0      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b095      	sub	sp, #84	@ 0x54
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004da2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004da6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e6      	bne.n	8004d82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3308      	adds	r3, #8
 8004dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d118      	bne.n	8004e22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f023 0310 	bic.w	r3, r3, #16
 8004e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6979      	ldr	r1, [r7, #20]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e6      	bne.n	8004df0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e36:	bf00      	nop
 8004e38:	3754      	adds	r7, #84	@ 0x54
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e44:	b084      	sub	sp, #16
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	f107 001c 	add.w	r0, r7, #28
 8004e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e56:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d121      	bne.n	8004ea2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	4b21      	ldr	r3, [pc, #132]	@ (8004ef4 <USB_CoreInit+0xb0>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fa92 	bl	80053c0 <USB_CoreReset>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e010      	b.n	8004ec4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa86 	bl	80053c0 <USB_CoreReset>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ebc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004ec4:	7fbb      	ldrb	r3, [r7, #30]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10b      	bne.n	8004ee2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f043 0206 	orr.w	r2, r3, #6
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eee:	b004      	add	sp, #16
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	ffbdffbf 	.word	0xffbdffbf

08004ef8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f023 0201 	bic.w	r2, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d115      	bne.n	8004f68 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f48:	200a      	movs	r0, #10
 8004f4a:	f7fc f8d1 	bl	80010f0 <HAL_Delay>
      ms += 10U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	330a      	adds	r3, #10
 8004f52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fa25 	bl	80053a4 <USB_GetMode>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d01e      	beq.n	8004f9e <USB_SetCurrentMode+0x84>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f64:	d9f0      	bls.n	8004f48 <USB_SetCurrentMode+0x2e>
 8004f66:	e01a      	b.n	8004f9e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d115      	bne.n	8004f9a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f7a:	200a      	movs	r0, #10
 8004f7c:	f7fc f8b8 	bl	80010f0 <HAL_Delay>
      ms += 10U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	330a      	adds	r3, #10
 8004f84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa0c 	bl	80053a4 <USB_GetMode>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <USB_SetCurrentMode+0x84>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f96:	d9f0      	bls.n	8004f7a <USB_SetCurrentMode+0x60>
 8004f98:	e001      	b.n	8004f9e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e005      	b.n	8004faa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2bc8      	cmp	r3, #200	@ 0xc8
 8004fa2:	d101      	bne.n	8004fa8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b086      	sub	sp, #24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	e009      	b.n	8004fe8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3340      	adds	r3, #64	@ 0x40
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b0e      	cmp	r3, #14
 8004fec:	d9f2      	bls.n	8004fd4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11c      	bne.n	8005030 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e005      	b.n	800503c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005034:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005042:	461a      	mov	r2, r3
 8005044:	2300      	movs	r3, #0
 8005046:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005048:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10d      	bne.n	800506c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005058:	2100      	movs	r1, #0
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f968 	bl	8005330 <USB_SetDevSpeed>
 8005060:	e008      	b.n	8005074 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005062:	2101      	movs	r1, #1
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f963 	bl	8005330 <USB_SetDevSpeed>
 800506a:	e003      	b.n	8005074 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800506c:	2103      	movs	r1, #3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f95e 	bl	8005330 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005074:	2110      	movs	r1, #16
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8fa 	bl	8005270 <USB_FlushTxFifo>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f924 	bl	80052d4 <USB_FlushRxFifo>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a8:	461a      	mov	r2, r3
 80050aa:	2300      	movs	r3, #0
 80050ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b4:	461a      	mov	r2, r3
 80050b6:	2300      	movs	r3, #0
 80050b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	e043      	b.n	8005148 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050d6:	d118      	bne.n	800510a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ea:	461a      	mov	r2, r3
 80050ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e013      	b.n	800511c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005100:	461a      	mov	r2, r3
 8005102:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	e008      	b.n	800511c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005116:	461a      	mov	r2, r3
 8005118:	2300      	movs	r3, #0
 800511a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005128:	461a      	mov	r2, r3
 800512a:	2300      	movs	r3, #0
 800512c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800513a:	461a      	mov	r2, r3
 800513c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3301      	adds	r3, #1
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800514c:	461a      	mov	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4293      	cmp	r3, r2
 8005152:	d3b5      	bcc.n	80050c0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	e043      	b.n	80051e2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800516c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005170:	d118      	bne.n	80051a4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005184:	461a      	mov	r2, r3
 8005186:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	e013      	b.n	80051b6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519a:	461a      	mov	r2, r3
 800519c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	e008      	b.n	80051b6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b0:	461a      	mov	r2, r3
 80051b2:	2300      	movs	r3, #0
 80051b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c2:	461a      	mov	r2, r3
 80051c4:	2300      	movs	r3, #0
 80051c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d4:	461a      	mov	r2, r3
 80051d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	3301      	adds	r3, #1
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051e6:	461a      	mov	r2, r3
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d3b5      	bcc.n	800515a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005200:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800520e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005210:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f043 0210 	orr.w	r2, r3, #16
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <USB_DevInit+0x2b4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005230:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f043 0208 	orr.w	r2, r3, #8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005244:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	4b06      	ldr	r3, [pc, #24]	@ (800526c <USB_DevInit+0x2b8>)
 8005252:	4313      	orrs	r3, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005258:	7dfb      	ldrb	r3, [r7, #23]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005264:	b004      	add	sp, #16
 8005266:	4770      	bx	lr
 8005268:	803c3800 	.word	0x803c3800
 800526c:	40000004 	.word	0x40000004

08005270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800528a:	d901      	bls.n	8005290 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e01b      	b.n	80052c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	daf2      	bge.n	800527e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	019b      	lsls	r3, r3, #6
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052b4:	d901      	bls.n	80052ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e006      	b.n	80052c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d0f0      	beq.n	80052a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052ec:	d901      	bls.n	80052f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e018      	b.n	8005324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	daf2      	bge.n	80052e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2210      	movs	r2, #16
 8005302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005310:	d901      	bls.n	8005316 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e006      	b.n	8005324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b10      	cmp	r3, #16
 8005320:	d0f0      	beq.n	8005304 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800537c:	f023 0303 	bic.w	r3, r3, #3
 8005380:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	f003 0301 	and.w	r3, r3, #1
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053d8:	d901      	bls.n	80053de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e01b      	b.n	8005416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	daf2      	bge.n	80053cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f043 0201 	orr.w	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3301      	adds	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005402:	d901      	bls.n	8005408 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e006      	b.n	8005416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d0f0      	beq.n	80053f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <memset>:
 8005422:	4402      	add	r2, r0
 8005424:	4603      	mov	r3, r0
 8005426:	4293      	cmp	r3, r2
 8005428:	d100      	bne.n	800542c <memset+0xa>
 800542a:	4770      	bx	lr
 800542c:	f803 1b01 	strb.w	r1, [r3], #1
 8005430:	e7f9      	b.n	8005426 <memset+0x4>
	...

08005434 <__libc_init_array>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4d0d      	ldr	r5, [pc, #52]	@ (800546c <__libc_init_array+0x38>)
 8005438:	4c0d      	ldr	r4, [pc, #52]	@ (8005470 <__libc_init_array+0x3c>)
 800543a:	1b64      	subs	r4, r4, r5
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	2600      	movs	r6, #0
 8005440:	42a6      	cmp	r6, r4
 8005442:	d109      	bne.n	8005458 <__libc_init_array+0x24>
 8005444:	4d0b      	ldr	r5, [pc, #44]	@ (8005474 <__libc_init_array+0x40>)
 8005446:	4c0c      	ldr	r4, [pc, #48]	@ (8005478 <__libc_init_array+0x44>)
 8005448:	f000 f818 	bl	800547c <_init>
 800544c:	1b64      	subs	r4, r4, r5
 800544e:	10a4      	asrs	r4, r4, #2
 8005450:	2600      	movs	r6, #0
 8005452:	42a6      	cmp	r6, r4
 8005454:	d105      	bne.n	8005462 <__libc_init_array+0x2e>
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	f855 3b04 	ldr.w	r3, [r5], #4
 800545c:	4798      	blx	r3
 800545e:	3601      	adds	r6, #1
 8005460:	e7ee      	b.n	8005440 <__libc_init_array+0xc>
 8005462:	f855 3b04 	ldr.w	r3, [r5], #4
 8005466:	4798      	blx	r3
 8005468:	3601      	adds	r6, #1
 800546a:	e7f2      	b.n	8005452 <__libc_init_array+0x1e>
 800546c:	080054bc 	.word	0x080054bc
 8005470:	080054bc 	.word	0x080054bc
 8005474:	080054bc 	.word	0x080054bc
 8005478:	080054c0 	.word	0x080054c0

0800547c <_init>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	bf00      	nop
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr

08005488 <_fini>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr
